type ChatConnection {
  edges: [ChatEdge!]!
  pageInfo: PageInfo!
}

type ChatEdge {
  cursor: String!
  node: Chat!
}

type Chat implements Node {
  id: ID!
  name: String!
}

input CreateChatInput {
  to: ID!
}

input SendChatMessageInput {
  id: ID!
  content: String!
}

type ChatJoinEvent {
    id: ID!
    agentId: ID!
}

type ChatLeaveEvent {
    id: ID!
    agentId: ID!
}

type ChatMessageEvent {
    id: ID!
    message: Message
}

union ChatEvent = ChatMessageEvent | ChatJoinEvent | ChatLeaveEvent

extend type Query {
  myChats(after: String, before: String, first: Int, last: Int): ChatConnection!
  chat(id: ID!): Chat!
  chatMessages(chatId: ID!, after: String, before: String, first: Int, last: Int): MessageConnection!
}

extend type Mutation {
  createChat(input: CreateChatInput!): Chat!
  sendChatMessage(input: SendChatMessageInput!): Message!
}

extend type Subscription {
    chat(id: ID!): ChatEvent
}
